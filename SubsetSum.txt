/**
 * @file prac.cpp
 * @author Sowrav Nath
 * @brief  Is there any Subset of a given sum..
 * @version 0.1
 * @date 2023-10-05
 * 
 * @copyright Copyright (c) 2023
 * 
 */

								/* Recursive */
int tab[2000][2000];
int subsetSum(int n, int sum){ 
	
	if (sum == 0) return 1;
	if (n <= 0) return 0;
	if (tab[n - 1][sum] != -1) return tab[n - 1][sum];

	if (a[n - 1] > sum){
		return tab[n - 1][sum] = subsetSum(a, n - 1, sum);
	} else {	 
		return tab[n - 1][sum] = subsetSum(n - 1, sum) or subsetSum(n - 1, sum - a[n - 1]);
	}
}

								/* Iterative */

bool isSubsetSum(int n, int sum)
{
	// The value of subset[i][j] will be true if
	// there is a subset of set[0..j-1] with sum
	// equal to i
	bool subset[n + 1][sum + 1];

	// If sum is 0, then answer is true
	for (int i = 0; i <= n; i++)
		subset[i][0] = true;

	// If sum is not 0 and set is empty,
	// then answer is false
	for (int i = 1; i <= sum; i++)
		subset[0][i] = false;

	// Fill the subset table in bottom up manner
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= sum; j++) {
			if (j < set[i - 1])
				subset[i][j] = subset[i - 1][j];
			if (j >= set[i - 1])
				subset[i][j] = (subset[i - 1][j] or subset[i - 1][j - set[i - 1]]);
		}
	}

	return subset[n][sum];
}