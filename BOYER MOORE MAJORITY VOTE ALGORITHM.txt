The Boyer-Moore voting method is one of the most often used optimum algorithms for determining the majority element among elements with more than N/2 occurrences. This works wonderfully for finding the majority element, which requires two traversals over the provided items and is O(N) time and O(1) space complexity.

This method is often asked about in interviews with companies like Google, Facebook, Microsoft, Salesforce, and Amazon.


Psuedocode
1. initialize count, num = 0;
2. iterate x in array
	- if(count == 0) num = x
	- if(x == num) count++
		else count--
3. iterate x in array
	- if(num == x) count++
4. if(count > n/2) return num
	else return -1


visulaization :

1. count = 0, num = 0

2.
 
x ----- 1	1	3	3	3	3	2	1
num---- 1	1 	1	1	3	3	3	3
count-- 1	2	1	0	1	2	1	0


3. count = 0, num = 3
count = 4.



Generalizing for n/k Occurrences:
1. Initialization: Start by creating an array with k-1 slots, each storing a pair of values (element, count) to represent potential candidates and their counts. Additionally, keep two variables, count_others and count_cleared, both initially set to 0.

2. Scanning the Array: Traverse through the array, and for each element, follow these steps:

If the element already exists in one of the k-1 slots, increment its count.
If there’s an empty slot in the array, insert the current element as a new candidate with a count of 1.
If neither of the above conditions applies, decrease the count of all candidates by 1.

3. Verification: After this step, you’ll have k-1 candidates along with their counts. To identify the elements occurring more than n/k times, iterate through the array once more. For each candidate, check if its actual count is greater than n/k. Additionally, keep track of elements cleared from the candidates during the scanning step using the count_cleared variable.


// C++ code for the above approach:
#include <bits/stdc++.h>
using namespace std;

vector<int> majorityElement(vector<int>& nums, int k)
{
	int n = nums.size();

	// Initialize an array of pairs to store k-1
	// candidates and their counts
	vector<pair<int, int> > candidates(k - 1);

	// Initialize candidate elements
	// and their counts to 0
	for (int i = 0; i < k - 1; i++) {
		candidates[i] = { 0, 0 };
	}

	// Step 1: Scanning the Array
	for (int num : nums) {
		bool found = false;
		for (int j = 0; j < k - 1; j++) {

			// If the element exists in
			// candidates
			if (candidates[j].first == num) {

				// Increment its count
				candidates[j].second++;
				found = true;
				break;
			}
		}
		// If the element is not in candidates
		if (!found) {
			for (int j = 0; j < k - 1; j++) {

				// Find an empty slot
				if (candidates[j].second == 0) {

					// Insert as a new candidate
					candidates[j] = { num, 1 };
					found = true;
					break;
				}
			}
		}

		// If all slots are occupied
		if (!found) {

			// Decrement counts
			// of all candidates
			for (int j = 0; j < k - 1; j++) {
				candidates[j].second--;
			}
		}
	}

	// Initialize a vector to store
	// the final results
	vector<int> ans;

	// Step 2: Verification
	for (int i = 0; i < k - 1; i++) {
		int count = 0;
		for (int j = 0; j < n; j++) {
			if (nums[j] == candidates[i].first) {
				count++;
			}
		}

		// If the count is greater than n/k
		if (count > n / k) {

			// Add the candidate
			// to the result
			ans.push_back(candidates[i].first);
		}
	}

	return ans;
}

// Drivers code
int main()
{
	vector<int> nums = { 3, 2, 3 };
	int k = 3;
	vector<int> result = majorityElement(nums, k);

	cout << "Elements occurring more than "
		<< nums.size() / k << " times: ";
	for (int num : result) {
		cout << num << " ";
	}
	cout << endl;

	return 0;
}
